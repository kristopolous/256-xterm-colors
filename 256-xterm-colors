#!/usr/bin/ruby

# Ruby script to show all 256 xterm colors in the terminal/bash

# Copyright 2011 Gawin Dapper. http://gaw.in
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'set'

def hsv2rgb(h, s, v) 

  i = h.floor
  f = h - i
  p = (v * (6 - s)) / 6
  q = (v * (6 - s * f)) / 6
  t = (v * (6 - s * (1 - f))) / 6

  case i
    when 0
      return [v, t, p]

    when 1
      return [q, v, p]

    when 2
      return [p, v, t]

    when 3
      return [p, q, v]

    when 4
      return [t, p, v]

    when 5
      return [v, p, q]
  end 
end

class Color
  def initialize(triplet)
    @r, @g, @b = triplet
  end

  def negate
    h, s, v = rgb2hsv(@r, @g, @b)

    v = (s + 0.5)
    if v > 1 
      v -= 1
    end
    r, g, b = hsv2rgb(h, s, v)

    Color.new([r, g, b])
  end

  def decompose
    ((@r * 36).ceil + (@g * 6).ceil + @b).ceil + 16
  end

  def to_i
    decompose
  end

  def to_s
    decompose.to_s
  end
end

def negate color
end

def fg color; "\e[38;5;#{color}m"; end
def bg color; "\e[48;5;#{color}m"; end

def midpoint set
  set.map { | x | 
    x += 0.05
  }
end
 
def base6 base
  one = (base % 6).to_i 
  base = (base / 6).floor
  two = (base % 6).to_i
  base = (base / 6).floor
  three = (base % 6).to_i 
  [three, two, one]
end

def docolor color
  reset = "\e[0m"

  # Print color code in a background and foregroud color
  print "#{fg(color)}#{bg(color)}#{"%03d" % color}#{reset}"
#  print "\e[0m\e[48;5;0m\e[38;5;#{color}m #{"%03d" % color}\n"
end

set = Set.new
(6 * 6 * 6).times do |i|
  if i % 6 == 0
    print "\n"
  end
  h, s, v = base6 i
  r, g, b = hsv2rgb(h, s, v)
  color = Color.new([r, g, b])
  set << color.to_i
  docolor color
  #puts "#{h} #{s} #{v} | #{r} #{g} #{b}"# #{color}"
end
puts set.length
